/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import org.junit.jupiter.api.Test;

import static org.assertj.core.api.Assertions.*;
import static org.junit.jupiter.api.Assertions.*;

import java.util.List;

import org.junit.jupiter.api.DisplayName;

class AppTest {

    @DisplayName("Exemple d'assertions pour les strings")
    @Test
    void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");

        assertThat(classUnderTest.getGreeting()).isNotNull().startsWith("Hello").contains("World").endsWith("!");
    }

    @DisplayName("Exemple d'assertions pour les listes")
    @Test
    void testListes() {
        List<String> fruits = List.of("Pomme", "Poire", "Orange");

        assertThat(fruits).hasSize(3).contains("Pomme").doesNotContain("Mangue").doesNotHaveDuplicates();
    }
    
    @DisplayName("Exemple d'assertions pour les nombres")
    @Test
    void testNombres() {
        List<Integer> nombres = List.of(5, 10, 100, 456);

        assertThat(nombres).hasSize(4).isSorted().allMatch(n -> n > 4);
    }
    @DisplayName("Exemple d'assertions pour des objets")
    @Test
    void testObjets() {
    	Person alice = new Person("Alice", 30);
    	Person bob = new Person("Bob", 35);
    	List<Person> people = List.of(alice,bob);
    	
    	assertThat(alice).extracting(Person::getName,Person::getAge).contains("Alice",30);
    	assertThat(people).extracting(Person::getName).contains("Alice","Bob");

    	Person actual = new Person("Alice", 30,new Adress("Laval","France"));
    	Person expected = new Person("Alice", 30,new Adress("Laval","France"));
    	assertThat(actual).usingRecursiveComparison()
    	.withComparatorForType(String.CASE_INSENSITIVE_ORDER,String.class)
    	.ignoringFields("age")
    	.isEqualTo(expected);
    	
    }
}